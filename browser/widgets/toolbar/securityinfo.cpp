/****************************************
 *
 *   INSERT-PROJECT-NAME-HERE - INSERT-GENERIC-NAME-HERE
 *   Copyright (C) 2019 Victor Tran
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * *************************************/
#include "securityinfo.h"
#include "ui_securityinfo.h"

#include "managers/profilemanager.h"
#include "managers/featuremanager.h"
#include "securityinfopermissionswitch.h"
#include <QWebEngineProfile>
#include <QSslCertificate>
#include <QUrl>
#include <core/safebrowsing.h>

struct SecurityInfoPrivate {
    QWebEngineProfile* profile;

    FeatureManager* features;
    QList<QWidget*> permissionSwitches;
};

SecurityInfo::SecurityInfo(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::SecurityInfo)
{
    ui->setupUi(this);

    d = new SecurityInfoPrivate();

    ui->verticalSpacer->changeSize(0, 0, QSizePolicy::Preferred, QSizePolicy::Expanding);
    ui->verticalSpacer_2->changeSize(0, 0, QSizePolicy::Preferred, QSizePolicy::Expanding);
}

SecurityInfo::~SecurityInfo()
{
    delete ui;
    delete d;
}

void SecurityInfo::setProfile(QWebEngineProfile* profile)
{
    d->profile = profile;
    d->features = FeatureManager::managerFor(profile);
}

void SecurityInfo::setCurrentCertificate(QUrl url, QSslCertificate certificate)
{
    if (url.scheme() == "theweb") {
        ui->connectionSummary->setText(tr("GENERATED BY THEWEB"));
        ui->connectionDetails->setText(tr("This content is generated by theWeb"));
        ui->viewCertButton->setVisible(false);
    } else if (certificate.isNull()) {
        ui->connectionSummary->setText(tr("INSECURE CONNECTION"));
        ui->connectionDetails->setText(tr("Don't enter sensitive information into this site; it can easily be intercepted and stolen."));
        ui->viewCertButton->setVisible(false);
//    } else if (d->isEvCertificate(certificate)) {
//        ui->connectionSummary->setText(tr("SECURE AND ACCREDITED CONNECTION"));
    } else {
        ui->connectionSummary->setText(tr("SECURE CONNECTION"));
        ui->connectionDetails->setText(tr("Sensitive information is encrypted and secured when sent to this site."));
        ui->viewCertButton->setVisible(true);
    }

    if (SafeBrowsing::checkUrlLocally(url) != "") {
        //Override some text values
        QString threatType = SafeBrowsing::checkUrlLocally(url);

        if (threatType == "MALWARE" || threatType == "POTENTIALLY_HARMFUL_APPLICATION") {
            ui->connectionSummary->setText(tr("CONTAINS MALWARE"));
            ui->connectionDetails->setText(tr("This site was found to host dangerous apps that may compromise your security; for example, they may steal or delete personal information (for example, important documents, photos, passwords and card information)"));
        } else if (threatType == "SOCIAL_ENGINEERING") {
            ui->connectionSummary->setText(tr("DECEPTIVE SITE"));
            ui->connectionDetails->setText(tr("This site was created to trick you into doing something dangerous, for example, installing harmful software or revealing personal information (for example, passwords, phone numbers or card information)"));
        } else if (threatType == "UNWANTED_SOFTWARE") {
            ui->connectionSummary->setText(tr("CONTAINS UNWANTED SOFTWARE"));
            ui->connectionDetails->setText(tr("This site was found to host apps that may compromise your browsing experience; for example, they may change your home page or show spurious advertisements."));
        }
    }

    for (QWidget* s : d->permissionSwitches) {
        ui->permissionSwitches->removeWidget(s);
        s->deleteLater();
    }
    d->permissionSwitches.clear();

    QUrl originUrl;
    originUrl.setScheme(url.scheme());
    originUrl.setHost(url.host());
    originUrl.setPort(url.port());
    originUrl.setPath("/");

    for (FeatureManager::Feature feature : FeatureManager::allFeatures()) {
        FeatureManager::FeatureAllowed allowed = d->features->isFeatureAllowed(originUrl, feature);
        if (allowed != FeatureManager::Ask) {
            SecurityInfoPermissionSwitch* s = new SecurityInfoPermissionSwitch(d->features, originUrl, feature, allowed);
            s->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
            ui->permissionSwitches->addWidget(s);
            d->permissionSwitches.append(s);
        }
    }

    if (d->permissionSwitches.count() == 0) {
        QLabel* l = new QLabel();
        l->setText(tr("This site hasn't asked for any permissions yet."));
        l->setMargin(9);
        ui->permissionSwitches->addWidget(l);
        d->permissionSwitches.append(l);
    }
}
